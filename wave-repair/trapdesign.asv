function [trap] = trapdesign(P, G, bandwidth, num, pm_cost)
%   设计陷波环节
%   如何设计 从前向后加  假设闭环相频单减，闭环幅频单调递增，找出第一个不符合的频点，检查同带宽的距离，
%   是否能定义优化问题，寻优内容为陷波滤波器的三个参数，限定在较为窄的范围内 must have a try
%   如果是添加两个陷波滤波器，怎么考虑
%   指标函数如何添加

%% 改善，不加先波滤波器，哪里开始不满足指标

%% 加入一个环节， 优化实验
[~, ~, ~, wc] = margin(P * G);
% pm_cost = 8;
ncount = round(bandwidth / 2 / pi);
data.fre = linspace(1, ncount, ncount) * 2 * pi;
data.mag = zeros(ncount, 1);
data.phi = zeros(ncount, 1);
[mag, phi] = bode(P * G, data.fre);
for i = 1 : ncount
    data.mag(i) = mag(1, 1, i);
    data.phi(i) = phi(1, 1, i);
end

%% 获得start point
start = zeros(num * 3, 1);
first_fre = bandwidth - 5;
for i = 1 : num
   start(i * 3 - 2) = 1.1;
   start(i * 3 - 1)= 15;
   start(i * 3) = first_fre - (i - 1) * 2 * pi; 
end

%% 获得约束
lb = zeros(num * 3, 1);
ub = zeros(num * 3, 1);
for i = 1 : num
    lb(i * 3 - 2) = 1;
    lb(i * 3 - 1) = 7;
    lb(i * 3) = bandwidth * 0.5;
    ub(i * 3 - 2) = 5;
    ub(i * 3 - 1)= 15;
    ub(i * 3) = bandwidth + 10;
end

% options = optimset('Algorithm','interior-point');
options = optimset('Algorithm','sqp');

[x, fval, exitflag] = fmincon(@(x)GetTrapcost(x, num, data, 0, 0)...
    , start, [], [], [], [], lb, ub, @(x)nonlcon_trap(x, wc + 2, pm_cost, data, num), options);
toc
% [c, ceq] = nonlcon_trap(x, wc, pm_cost, data);
trap.num = num;
for i = 1 : num
    
end

trap.G1 = tf([1, x(1) * x(2), x(3) * x(3)], [1, x(2), x(3) * x(3)]);
trap.G2 = tf([1, x(4) * x(5), x(6) * x(6)], [1, x(5), x(6) * x(6)]);
trap.G3 = tf([1, x(7) * x(8), x(9) * x(9)], [1, x(8), x(9) * x(9)]);

end

